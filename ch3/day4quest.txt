Explain, in your own words, the 2 things resource interfaces can be used for (we went over both in today's content)

Defining a set of requirements to interact with a specific resource
allowing you to only expose certain things to certain people 

Define your own contract. Make your own resource interface and a resource that implements the interface. Create 2 functions. In the 1st function, show an example of not restricting the type of the resource and accessing its content. In the 2nd function, show an example of restricting the type of the resource and NOT being able to access its content.
https://play.onflow.org/43b6ec26-4764-4465-b9db-6716ea886181

pub contract LeonsRI {

    pub resource interface BookInterface {
      pub var name: String
      pub var serialnumber: Int
    }

    pub resource Book: BookInterface {
      pub var name: String
      pub var serialnumber: Int

      pub fun updateNumber(newNumber: Int): Int {
        self.serialnumber = newNumber
        return self.serialnumber
      }


      init() {
        self.name = "Poor Charlie's Almanack"
        self.serialnumber = 1
      }
    }

    pub fun interactingWithTheResource() {
      let test: @Book <- create Book()
      test.updateNumber(newNumber: 27)
      log(test.serialnumber) 

      destroy test
    }

    pub fun interactingWithTheRIsoCannotAccess() {
      let test: @Book{BookInterface} <- create Book()
      let newName = test.updateNumber(newNumber: 22)
      log(newName)

      destroy test
    }
}




CORRECT CODE
pub contract Stuff {

    pub struct interface ITest {
      pub var greeting: String
      pub var favouriteFruit: String
      pub fun changeGreeting(newGreeting: String): String 
    }

    // ERROR:
    // `structure Stuff.Test does not conform 
    // to structure interface Stuff.ITest`
    pub struct Test: ITest {
      pub var greeting: String
      pub var favouriteFruit: String

      pub fun changeGreeting(newGreeting: String): String {
        self.greeting = newGreeting
        return self.greeting // returns the new greeting
      }

      init() {
        self.greeting = "Hello!"
        self.favouriteFruit = "apples"
      }
    }

    pub fun fixThis() {
      let test: Test{ITest} = Test()
      let newGreeting = test.changeGreeting(newGreeting: "Bonjour!")
      log(newGreeting)
    }
}